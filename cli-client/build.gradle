/*******************************************************************************
* Copyright (c) 2015 IBM Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'distribution'

archivesBaseName = 'larsClient'

dependencies {
    implementation group:'org.apache.aries', name:'org.apache.aries.util', version:aries_util_version
    implementation group:'org.osgi', name:'org.osgi.core', version:osgi_core_version
    implementation project(':upload-lib')

    testCompile group:'org.jmockit', name:'jmockit', version:jmockit_version
    testCompile group:'org.hamcrest', name:'hamcrest-library', version:hamcrest_version
    testCompile group:'junit', name:'junit', version:junit_version
    testCompile group:'org.mongodb', name:'mongo-java-driver', version:mongodb_java_version
    testCompile project(':test-utils')
}

jar {
    manifest {
        attributes("Main-Class": "com.ibm.ws.lars.upload.cli.Main",
                   "Class-Path": configurations.runtimeClasspath.files.collect { file -> file.getName()}.join(' '))
    }
}

test {
    File jmockitJar = configurations.testCompile.find({it.name.startsWith("jmockit")})
    jvmArgs "-javaagent:"+jmockitJar.getAbsolutePath()
}

testFat {
    dependsOn 'unpackDist'
    inputs.files({tasks.unpackDist})

    File jmockitJar = configurations.testCompile.find({it.name.startsWith("jmockit")})
    jvmArgs "-javaagent:"+jmockitJar.getAbsolutePath()
}

distributions {
    main {
        // baseName = archivesBaseName
        contents {
            into '/'
            into('bin/tools') {
                from(configurations.runtimeClasspath, configurations.runtimeClasspath.artifacts.files)
            }
            into('bin') {
                from('src/main/scripts')
                fileMode(0755)
            }
            into('/') {
                from(rootProject.file('LICENSE'))
            }
        }
    }
}

task unpackDist(type: Copy) {
    dependsOn distZip
    distZip.outputs.files.each { archive ->
        from zipTree(archive)
    }
    into file('build/test-working/client')
}

task dist {
    dependsOn 'distZip'
    dependsOn 'testZipContents'
    outputs.files(distZip.getOutputs().getFiles())
}

task testZipContents {
    dependsOn 'distZip'
    doLast{
        checkZipContents(distZip.outputs.files.getAt(0), ['LICENSE', 'bin/larsClient.bat'])
    }
}

// vim: set si:
